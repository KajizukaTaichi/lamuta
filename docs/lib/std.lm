const len: function = λl.{
    let i = 0;
    for _ in (l as list) {
        i += 1
    };
    i
};

const join: function = λa.λb.{
    let result = "";
    let index = 0;
    for i in a {
        index += 1;
        let result = result + (i as text) + { if (len a == index) "" else b }
    };
    result
};

const replace: function = λt.λb.λa.{
    if (find t b) {
        let [result, index] = [t, it];
        result[index ~ (len b + 1)] := a;
        result
    } else
        t
};

const map: function = λf.λl.{
    let result = [];
    for i in l {
        result += [f i]
    };
    result
};

const filter: function = λf.λl.{
    let result = [];
    for i in l {
        if (f i) {
            result += [i]
        }
    };
    result
};

const reduce: function = λf.λl.{
    let result = l[0];
    for i in l[1 ~ (len l)] {
        let result = f result i
    };
    result
};

const find: function = λt.λq.{
    let result = null;
    let index = 0;
    while (index < (len t - (len q) + 1)) {
        let item = t[index ~ (len q + index)];
        if (item == q) {
            let result = index
        };
        index += 1
    };
    if (result == null) {
        fault q as symbol as text + " is not found in " + (t as symbol as text)
    } else
        result
};

const zip: function = λa.λb.{
    let result = [];
    for i in (0 ~ len(a)) {
        result += [[a[i], b[i]]]
    };
    result
};

const compose: function = λf.λg.λx.f(g(x));
