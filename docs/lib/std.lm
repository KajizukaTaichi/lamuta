let len = λl.{ let i = 0; for _ in (l as list) { let i = (i + 1) }; i };
let join = λa.λb.{ let result = ""; let index = 0; for i in a { let index = (index + 1); let result = (result + (i as text) + { if (index == (len a)) "" else b }) }; result };
let set = λl.λi.λv.{ let before = ((slice l) (range i)); let after = ((slice l) (range [(i + 1), (len l)])); (before + { if (type l == text) v else [v] } + after) };
let filter = λf.λl.{ let result = []; for i in l { if (f i) { let result = (result + [i]) } }; result };
let reduce = λf.λl.{ let result = (l :: 0); for i in ((slice l) (range [1, (len l)])) { let result = (f result i) }; result };
let map = λf.λl.{ let result = []; for i in l { let result = (result + [(f i)]) }; result };
let find = λt.λq.{ let result = null; let index = 0; while (index < ((len t) - (len q) + 1)) { let item = ((slice t) (range [index, (len q + index)])); if (item == q) { let result = index }; let index = (index + 1) }; if (result == null) { fault } else result };
let slice = λl.λs.{ let result = { if (type l == text) "" else [] }; for index in (s as list) { let result = (result + { if (type l == text) (l :: index) else [(l :: index)] }) }; result };
let compose = λf.λg.λx.(f (g x));
