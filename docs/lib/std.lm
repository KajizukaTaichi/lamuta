const len: function = λl.{
    let i = 0;
    for _ in (l as list) {
        i += 1
    };
    i
};

const join: function = λa.λb.{
    let result = "";
    let index = 0;
    for i in a {
        index += 1;
        let result = result + (i as text) + { if (len a == index) "" else b }
    };
    result
};

const map: function = λf.λl.{
    let result = [];
    for i in l {
        result += [f i]
    };
    result
};

const filter: function = λf.λl.{
    let result = [];
    for i in l {
        if (f i) {
            result += [i]
        }
    };
    result
};

const reduce: function = λf.λl.{
    let result = l[0];
    for i in l[1 ~ (len l)] {
        let result = f result i
    };
    result
};

const find: function = λt.λq.{
    let result = null;
    let index = 0;
    while (index < (len t - (len q) + 1)) {
        let item = t[index ~ (len q + index)];
        if (item == q) {
            let result = index
        };
        index += 1
    };
    if (result == null) {
        fault f"{q as symbol} is not found in {t as symbol}"
    } else
        result
};

const zip: function = λa.λb.{
    let result = [];
    for i in (0 ~ len(a) as list) {
        result += [[a[i], b[i]]]
    };
    result
};

const reverse: function = λt.{
    let result = { if (type t == text) "" else [] };
    for i in (t as list) {
        let result = { if (type t == text) i else [i] } + result
    };
    result
};

const trim: function = λx.{
    let t: text = x;
    const trimStart: function = λt.{
        let delimiter = [" ", "　", "\n", "\t", "\r"];
        let [isFirstChar, result] = [0, ""];
        for c in (t as list) {
            if (delimiter :: [c]) {
                if (isFirstChar == 1) {
                    result += c;
                }
            } else {
                if (isFirstChar == 0) {
                    isFirstChar := 1;
                };
                result += c;
            }
        };
        result
    };
    reverse(trimStart(reverse(trimStart(t))))
};

const removeAll: function = λx.λy.{
    let [object, query] = [x, y];
    while object[query] {
        object -= query
    };
    object
};

const justLeft: function = \x.\y.\z.{
    let [val, cols, altchar] = [x as text, y as number, z as text];
    if (len altchar < 1) { fault };
    let result = val;
    while (len result < cols) {
        result += altchar;
    };
    result
};

const justRight: function = \x.\y.\z.{
    let [val, cols, altchar] = [x as text, y as number, z as text];
    if (len altchar < 1) { fault };
    let result = val;
    while (len result < cols) {
        result := (altchar + result);
    };
    result
};

const compose: function = λf.λg.λx.f(g(x));
