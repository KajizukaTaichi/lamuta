let len = λl.{
    let i = 0;
    for _ in l {
        let i = i + 1;
    }
};

let slice = λl.λs.{
    let result = { if (type(l) == text) "" else [] };
    for index in s {
        let result = result + {
            if (type(l) == text) (l :: index)
            else [(l :: index)]
        };
    }
};

let map = λf.λl.{
    let result = [];
    for i in l {
        let result = result + [f(i)];
    }
};

let filter = λf.λl.{
    let result = [];
    for i in l {
        if f(i) {
            let result = result + [i];
        }
    };
    result
};

let reduce = λf.λl.{
    let result = (l :: 0);
    for i in (slice l (range [1, (len l)])) {
        let result = f result i;
    };
    result
};

let join = λa.λb.{
    let result = "";
    let index = 0;
    for i in a {
        let index = index + 1;
        let result = result + (i as text) + { if (index == (len a)) "" else b };
    }
};

let find = λtarget.λquery.{
    let result = null;
    let index = 0;
    while (index < (len target - (len query) + 1)) {
        let item = slice target (range [index, len query + index]);
        if (item == query) {
            let result = index;
        };
        let index = index + 1;
    };
    if (result == null) { fault } else result
}
