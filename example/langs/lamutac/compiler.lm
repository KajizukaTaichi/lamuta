load std;

const SPACE: list = [" ", "　", "\n", "\t", "\r"];
const INDENT: text = SPACE[0] * 12;

let parseExpr = fn(source ->
    let tokenList = tokenize SPACE source;
    let token = tokenList[len tokenList  - 1] |> trim;
    let token = {
        // Number 64-bit float;
        if (token as number) {
            @{ "class": #Value, "value": it };

        // Expression that override other operator
        } else if (token[0] == "(" & (token[len token - 1] == ")")) {
            token[1 ~ (len token - 1)] |> trim |> parseExpr;

        // Lambda abstract that is true formula
        } else if (token[0] == "λ" & token["."]) {
            let token = token - "λ" / ".";
            let [args, body] = [token[0], join token[1 ~ len(token)] "."];
            @{ "class": #Lambda, "value": [args, parseExpr body] };

        // Lambda abstract using back-slash instead
        } else if (token[0] == "\\" & token["."]) {
            let token = token - "\\" / ".";
            let [args, body] = [token[0], join token[1 ~ len(token)] "."];
            @{ "class": #Lambda, "value": [args, parseExpr body] };

        // Symbol
        } else {
            @{ "class": #Symbol, "value": token }
        }
    };
    if (len tokenList >= 2 & tokenList[len tokenList - 2]) {
        let hasLhs = λx.parseExpr(join tokenList[0 ~ (len tokenList - x)] " ");
        let operatorGen = λx.@{ "class": x, "value": [hasLhs 2, token] };
        match (trim it) {
            "+" => operatorGen #Add,
            "-" => operatorGen #Sub,
            "*" => operatorGen #Mul,
            "/" => operatorGen #Div,
            "|>" => @{ "class": #Apply, "value": [token, hasLhs 2] },
            _ => @{ "class": #Apply, "value": [hasLhs 1, token] }
        }
    } else {
        token
    }
);

let tokenize = fn(delimiter, source ->
    let [tokens, current] = [[], ""];
    let [nest, quote] = [0] * 2;

    for c in (source as list) {
        match c {
            "(" | "[" | "{" => {
                if (quote == 0) {
                    current += c;
                    nest += 1;
                }
            },
            ")" | "]" | "}" => {
                if (quote == 0) {
                    current += c;
                    nest -= 1;
                }
            },
            "\"" | "\'" | "\`" => {
                let quote = { if (quote == 1) 0 else 1 };
                current += c;
            },
            _ => {
                if (delimiter :: [c]) {
                    if ((nest == 0) & (quote == 0)) {
                        if (current != "") {
                            tokens += [current];
                            let current = "";
                        }
                    } else {
                        current += c;
                    }
                } else {
                    current += c;
                }
            }
        }
    };

    if (current != "") {
        let tokens = tokens + [current];
    };

    tokens
);

let codeGenOpr = fn(c, f, x ->
    [count, funcs, ast] := [c, f, x];
    if (type ast == #Value) {
        [count, funcs, ast.value as text]
    } else if (type ast == #Lambda) {
        let [arg, body] = ast.value; count += 1;
        let [fncCnt, funcs, body] = codeGenOpr 0 funcs body;
        let name = f"@lambda_abstract_{count}";
        funcs += f"\n
        define i32 {name}(i32 %{arg}) \{
            {body}
            ret i32 %r{fncCnt}
        \}";
        [count, funcs, name]
    } else if (type ast == #Symbol) {
        [count, funcs, f"%{ast.value}"]
    } else {
        let [count, funcs, lhs] = codeGenOpr count funcs ast.value[0]; lhsCnt := count;
        let [count, funcs, rhs] = codeGenOpr count funcs ast.value[1]; rhsCnt := count;

        count += 1;
        let beforeCode = "";
        if lhs["="] {
            beforeCode += f"{lhs}\n{INDENT}";
            let lhs = f"%r{lhsCnt}";
        };
        if rhs["="] {
            beforeCode += f"{rhs}\n{INDENT}";
            let rhs = f"%r{rhsCnt}";
        };
        [count, funcs, {
            if (type ast == #Apply) {
                f"{beforeCode}%r{count} = call i32 {lhs}(i32 {rhs})"
            } else {
                let op = {
                    match type(ast) {
                        #Add => "add",
                        #Sub => "sub",
                        #Mul => "mul",
                        #Div => "sdiv"
                    }
                };
                f"{beforeCode}%r{count} = {op} i32 {lhs}, {rhs}"
            }
        }]
    }
);

let compile = fn(x ->
    let [c, funcs, ast] = codeGenOpr 0 "" (parseExpr x);
    let outputCode = f"
        @format_str = private constant [3 x i8] c\"%d\\0A\"
        declare i32 @printf(i8* %format, ...)
        {funcs}

        define i32 @main(i32 %argc, i8** %argv) \{
            {ast}
            call i32 @printf(i8* bitcast ([3 x i8]* @format_str to i8*), i32 %r{c})
            ret i32 0
        \}
    ";
    outputCode
);

if cmdLineArgs[0] {
    print compile (readFile it), "\n";
} else {
    print "Lamutac: the Lamuta\'s compiler\n";
}
