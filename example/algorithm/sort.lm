load std;

let normalSort = fn(array ->
    let L = array as list;
    for i in (0 ~ len(L) as list) {
        for j in (0 ~ len(L) as list) {
            if (L[i] < L[j]) {
                [L[i], L[j]] := [L[j], L[i]]
            }
        }
    };
    L
);

let insertionSort = fn(array ->
    let L = array as list;
    for i in (1 ~ len(L) as list) {
        let key = L[i];  
        let j = i - 1;
        while (j >= 0 & (L[j] > key)) {
            L[j + 1] := L[j];
            j -= 1;
        };
        L[j + 1] := key
    };
    L
);

let stalinSort =  fn(array ->
    let L = array as list;
    let base = 0;
    for i in L {
        if (base < i) {
            base := i;
        } else {
            L -= [i];
        }
    };
    L
);

let kimSort = fn(array ->
    let L = array as list;
    [0] * (len(L) - 1) + [reduce (`+`) L] 
);

let communeSort = fn(array ->
    let L = array as list;
    [reduce (`+`) L / len(L)] * len(L) 
);

let array = [5, 4, 1, 8, 2];
for algorithm in [normalSort, insertionSort, stalinSort, kimSort, communeSort] {
    print algorithm(array), "\n";
}