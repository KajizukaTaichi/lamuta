let eval = λe.λp.{
    let env = e;
    match (p :: "type") {
        "expr" => {
            let code = [];
            for i in (p :: "value") {
                let code = code + [eval env i];
            };
            if (code :: 0 :: "type" == "function") {
                let func = (code :: 0 :: "value");
                func (slice code (range [1, len code]))
            } else {
                fault
            }
        },
        "symbol" => { if (env :: (p :: "value")) it else p },
        _ => p
    }
};

let getNumber = λx.{
    if (x :: "type" == "number") (
        x :: "value" as number
    ) else {
        fault
    }
};

let getText = λx.{
    if (x :: "type" == "text") (
        x :: "value" as text
    ) else {
        fault
    }
};

let getList = λx.{
    if (x :: "type" == "list") (
        x :: "value" as list
    ) else {
        fault
    }
};

let parse = λsource.{
    if (source :: 0 == "(" & (source :: (len source - 1) == ")")) {
        let inner = slice source (range [1, len source - 1]);
        let result = [];
        for i in (tokenize inner) {
            let result = result + [parse i];
        };
        { "type": "expr", "value": result }
    } else {
        if (source :: 0 == "'") {
            let inner = slice source (range [2, len source - 1]);
            let result = [];
            for i in (tokenize inner) {
                let result = result + [parse i];
            };
            { "type": "list", "value": result }
        } else {
            if (source :: 0 == doubleQuote & (source :: (len source - 1) == doubleQuote)) {
                let inner = slice source (range [1, len source - 1]);
                { "type": "text", "value": inner }
            } else {
                if (source as number) { "type": "number", value: it }
                else { "type": "symbol", "value": source }
            }
        }
    }
};

let tokenize = λsource.{
    let tokens = [];
    let current = "";
    let nest = 0;
    let quote = 0;

    for c in source {
        match c {
            "(" | "[" | "{" => {
                if (quote == 0) {
                    let current = current + c;
                    let nest = nest + 1;
                }
            },
            ")" | "]" | "}" => {
                if (quote == 0) {
                    let current = current + c;
                    let nest = nest - 1;
                }
            },
            " " | "　" => {
                if ((nest == 0) & (quote == 0)) {
                    if (current != "") {
                        let tokens = tokens + [current];
                        let current = "";
                    }
                } else {
                    let current = current + c;
                }
            },
            doubleQuote => {
                let quote = { if (quote == 1) 0 else 1 };
                let current = current + c;
            },
            _ => {
                let current = current + c;
            }
        }
    };

    if (current != "") {
        let tokens = tokens + [current];
    };

    tokens
};

let env = {
    "+": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a + b) (map getNumber l)) } },
    "-": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a - b) (map getNumber l)) } },
    "*": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a * b) (map getNumber l)) } },
    "/": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a / b) (map getNumber l)) } },
    "%": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a % b) (map getNumber l)) } },
    "^": { "type": "function", "value": λl.{ "type": "number", "value": (reduce λa.λb.(a ^ b) (map getNumber l)) } },
    "concat": { "type": "function", "value": λl.{ "type": "text", "value": (reduce λa.λb.(a + b) (map getText l)) } },
    "eval": { "type": "function", "value": λl.{ let expr = getList l; eval env { "type": "expr", "value": expr } } }
};

let main = λ_.{
    print "Lamuta Lisp";
    let flag = 1;
    while (flag == 1) {
        let entered = (input ">>> ");
        if (entered == "") {
            let flag = 0;
        } else {
            if (find entered ":=") {
                let name = (tokenize (slice entered (range [0, it])) :: 0);
                let expr = (tokenize (slice entered (range [it + 2, len entered])) :: 0);
                let env = env + { name: eval env (parse expr) };
            } else {
                print eval env (parse entered);
            }
        }
    }
};

main run
