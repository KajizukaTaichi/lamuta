load std;

let AST = @{
    "class": null,
    "value": null,
    "asNumber": fn(this ->
        if (type this == #Bool) {
            this.value as number
        } else {
            fault
        }
    )
};

let evaluate = fn(x ->
    let ast = x;
    if (type ast == #Nand) {
        print "Test 01\n";
        let terms = map self ast.value;
        let a = terms[0] as number;
        let b = terms[1] as number;
        AST + @{ 
            "class": #Bool, 
            "value": { 
                if (a == 0 & (b == 0)) 1
                else if (a == 0 & (b == 1)) 1
                else if (a == 1 & (b == 0)) 1
                else if (a == 1 & (b == 1)) 0
            }
        }
    } else if (type ast == #Bool) {
        ast
    } else {
        fault
    }
);

let parse = fn(source ->
    let tokenList = tokenize source;
    let token = tokenList[len tokenList  - 1];
    let token = { 
        if (token == "0") {
            AST + @{ "class": #Bool, "value": 0 }
        } else if (token == "1") {
            AST + @{ "class": #Bool, "value": 1 }
        } else if (token[0] == "(" & (token[len token - 1] == ")")) {
            self token[1 ~ (len token - 1)]
        } else {
            fault "invaild value"
        }
    };
    if (len tokenList >= 2) {
        let op = tokenList[len tokenList - 2];
        if (trim op == "nand") {
            AST + @{ 
                "class": #Nand,
                "value": [parse (join tokenList[0 ~ (len tokenList - 2)] " "), token]
            }
        } else {
            fault "invaild operator"
        }
    } else {
        token
    }
);

let tokenize = fn(source ->
    let tokens = [];
    let current = "";
    let nest = 0;
    let quote = 0;

    for c in (source as list) {
        match c {
            "(" | "[" | "{" => {
                if (quote == 0) {
                    let current = current + c;
                    let nest = nest + 1;
                }
            },
            ")" | "]" | "}" => {
                if (quote == 0) {
                    let current = current + c;
                    let nest = nest - 1;
                }
            },
            " " | "ã€€" => {
                if ((nest == 0) & (quote == 0)) {
                    if (current != "") {
                        let tokens = tokens + [current];
                        let current = "";
                    }
                } else {
                    let current = current + c;
                }
            },
            "\"" => {
                let quote = { if (quote == 1) 0 else 1 };
                let current = current + c;
            },
            _ => {
                let current = current + c;
            }
        }
    };

    if (current != "") {
        let tokens = tokens + [current];
    };

    tokens
);

print evaluate(parse("1 nand 1")) as number